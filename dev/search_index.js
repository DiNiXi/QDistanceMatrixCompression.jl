var documenterSearchIndex = {"docs":
[{"location":"#Q-Distance-Matrix-Compression","page":"Home","title":"Q-Distance Matrix Compression","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QDistanceMatrixCompression.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#QDistanceMatrixCompression.GraphicalDistanceMatrix","page":"Home","title":"QDistanceMatrixCompression.GraphicalDistanceMatrix","text":"GraphicalDistanceMatrix{T<:Real}\n\nA structure representing a graphical distance matrix computed from a graph. This specialized matrix type allows efficient storage and computation of resistance distances, similar to how ToeplitzMatrices.jl defines specialized matrices.\n\nFields\n\ngraph::SimpleGraph: The underlying graph\nmatrix::Matrix{T}: The precomputed resistance distance matrix (can be lazily evaluated)\nalgorithm::Symbol: The algorithm used to compute resistance distances (:naive, :vectorized, :backsolve, :sparse, :compact)\ncomputed::Bool: Whether the matrix has been computed\n\nExamples\n\nusing GraphicalDistance, Graphs\ng = barabasi_albert(100, 5)\nR = GraphicalDistanceMatrix(g)\n# Access as a standard matrix\nR[1, 2]\n# Or compute on demand using a specific algorithm\nR = GraphicalDistanceMatrix(g, :compact)\n\n\n\n\n\n","category":"type"},{"location":"#QDistanceMatrixCompression._subidentity_csc-Tuple{Integer, AbstractVector{<:Integer}}","page":"Home","title":"QDistanceMatrixCompression._subidentity_csc","text":"_subidentity_csc(n, cols)\n\nBuild the nxm sparse matrix whose columns are e{cols[1]},â€¦,e{cols[m]} by directly constructing the internal CSC arrays.\n\n\n\n\n\n","category":"method"},{"location":"#QDistanceMatrixCompression.graph-Tuple{GraphicalDistanceMatrix}","page":"Home","title":"QDistanceMatrixCompression.graph","text":"graph(R::GraphicalDistanceMatrix)\n\nGet the underlying graph.\n\n\n\n\n\n","category":"method"},{"location":"#QDistanceMatrixCompression.resistance_distance-Union{Tuple{T}, Tuple{GraphicalDistanceMatrix{T}, Integer, Integer}} where T<:Real","page":"Home","title":"QDistanceMatrixCompression.resistance_distance","text":"resistance_distance(R::GraphicalDistanceMatrix, i::Integer, j::Integer)\n\nGet the resistance distance between vertices i and j.\n\n\n\n\n\n","category":"method"},{"location":"#QDistanceMatrixCompression.spsolve","page":"Home","title":"QDistanceMatrixCompression.spsolve","text":"spsolve(A::SparseMatrixCSC, B::SparseMatrixCSC) -> SparseMatrixCSC\n\nSolve the system AX = B where A is a lower triangular sparse matrix (SparseMatrixCSC) and B is a sparse matrix (SparseMatrixCSC) representing the right-hand side.\n\nArguments\n\nA::SparseMatrixCSC: A lower triangular sparse matrix.\nB::SparseMatrixCSC: A sparse matrix representing the right-hand side.\n\nReturns\n\nX::SparseMatrixCSC: The solution matrix in sparse format.\n\nNotes\n\nAssumes that A is lower triangular and non-singular.\n\n\n\n\n\n","category":"function"}]
}
